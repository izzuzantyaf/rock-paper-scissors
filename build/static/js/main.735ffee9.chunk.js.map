{"version":3,"sources":["components/images/fist.svg","components/images/hold.svg","components/images/victory.svg","components/username-form/username-form.jsx","components/player/player.jsx","components/game-layout/game-layout.jsx","App.jsx","components/result-box/result-box.jsx","serviceWorker.js","index.js"],"names":["module","exports","UsernameForm","props","setPlayerUsername","bind","playerUsernameArr","Array","from","document","querySelectorAll","map","e","value","this","onUsernamePlayersChange","querySelector","remove","className","htmlFor","type","name","id","placeholder","required","onClick","React","Component","Player","attack","weapons","rock","paper","scissor","state","selectedWeapons","weaponsKeys","Object","keys","time","setInterval","selectedWeaponKey","Math","floor","random","length","setState","playerNumber","setTimeout","clearInterval","player","username","src","alt","GameLayout","players","player1","player2","App","handleUsernamePlayersChange","win","usernamePlayer1","usernamePlayer2","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.735ffee9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fist.7e32610f.svg\";","module.exports = __webpack_public_path__ + \"static/media/hold.b17e8f28.svg\";","module.exports = __webpack_public_path__ + \"static/media/victory.030b9d62.svg\";","import React from 'react'\r\nimport './username-form.css'\r\n\r\nclass UsernameForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.setPlayerUsername = this.setPlayerUsername.bind(this)\r\n    }\r\n\r\n    setPlayerUsername() {\r\n        const usernameInputField = Array.from(document.querySelectorAll('input.player'))\r\n        const playerUsernameArr = usernameInputField.map(e => e.value)\r\n        this.props.onUsernamePlayersChange(playerUsernameArr)\r\n        document.querySelector('div.overlay').remove()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"overlay\">\r\n                <section className=\"username-form-box\">\r\n                    <div className=\"username-form\">\r\n                        <label htmlFor=\"player1\">Player 1</label>\r\n                        <input type=\"text\" className=\"player\" name=\"player1\" id=\"player1\" placeholder=\"Insert username\" required />\r\n                        <span className=\"versus\">vs</span>\r\n                        <label htmlFor=\"player2\">Player 2</label>\r\n                        <input type=\"text\" className=\"player\" name=\"player2\" id=\"player2\" placeholder=\"Insert username\" required />\r\n                    </div>\r\n                    <button className=\"start\" onClick={this.setPlayerUsername}>Let's go</button>\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UsernameForm\r\n","import React from 'react'\r\nimport rock from '../images/fist.svg'\r\nimport paper from '../images/hold.svg'\r\nimport scissor from '../images/victory.svg'\r\nimport './player.css'\r\n\r\nclass Player extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        // this.weapons = [rock, paper, scissor]\r\n        this.attack = this.attack.bind(this)\r\n        this.weapons = {\r\n            rock: rock,\r\n            paper: paper,\r\n            scissor: scissor\r\n        }\r\n        this.state = {\r\n            selectedWeapons: null\r\n        }\r\n    }\r\n\r\n    attack() {\r\n        // randomize weapons\r\n        const weaponsKeys = Object.keys(this.weapons)\r\n        const time = setInterval(() => {\r\n            let selectedWeaponKey = weaponsKeys[Math.floor(Math.random() * weaponsKeys.length)]\r\n            this.setState(state => ({\r\n                selectedWeapons: this.weapons[selectedWeaponKey]\r\n            }))\r\n        }, 100);\r\n        // remove attack button\r\n        const attackBtn = document.querySelector(`.${this.props.playerNumber} button`)\r\n        attackBtn.remove()\r\n        // stop randomize weapons\r\n        setTimeout(() => {\r\n            clearInterval(time)\r\n        }, 1000);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={`player ${this.props.playerNumber}`}>\r\n                <div className=\"username\">{this.props.player.username}</div>\r\n                <div className=\"play-area\">\r\n                    <img src={this.state.selectedWeapons} alt=\"\" />\r\n                    <button onClick={this.attack}>\r\n                        Attack\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Player","import React from 'react';\r\nimport Player from '../player/player'\r\nimport './game-layout.css'\r\n\r\nclass GameLayout extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"game-layout\">\r\n                <Player player={this.props.players.player1} playerNumber=\"player1\" />\r\n                <Player player={this.props.players.player2} playerNumber=\"player2\" />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameLayout","import React from 'react';\r\nimport './App.css';\r\nimport UsernameForm from './components/username-form/username-form'\r\nimport GameLayout from './components/game-layout/game-layout'\r\nimport ResultBox from './components/result-box/result-box'\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.handleUsernamePlayersChange = this.handleUsernamePlayersChange.bind(this)\r\n    this.state = {\r\n      players: {\r\n        player1: {\r\n          username: null,\r\n          win: false\r\n        },\r\n        player2: {\r\n          username: null,\r\n          win: false\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleUsernamePlayersChange([usernamePlayer1, usernamePlayer2]) {\r\n    this.setState({\r\n      players: {\r\n        player1: {\r\n          username: usernamePlayer1\r\n        },\r\n        player2: {\r\n          username: usernamePlayer2\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {/* <ResultBox /> */}\r\n        <UsernameForm onUsernamePlayersChange={this.handleUsernamePlayersChange} />\r\n        <GameLayout players={this.state.players} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react'\r\nimport './result-box.css'\r\n\r\nclass ResultBox extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"overlay\">\r\n                <div className=\"result-box\">\r\n                    <div className=\"messages\">\r\n                        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Atque, rerum! Necessitatibus reprehenderit animi vitae veniam deserunt iusto quo sed, sunt porro, id consequuntur assumenda eius ad non inventore facere? Corrupti?\r\n                    </div>\r\n                    <div className=\"choices\">\r\n                        <button className=\"rematch\">Rematch</button>\r\n                        <button className=\"new-game\">New game</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default ResultBox\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}